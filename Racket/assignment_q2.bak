#lang racket

;This is an example implementation of ins_beg,
;It obviously doesn't do what it should, so you
;can edit this function to get started.
;
;Please note the provide function is necessary
;for the unit tests to work. Please include a
;(provide) for each function you write in your
;submitted assignment.
;
;You may delete these comments!

;nah, ur good fam, imma leave them there thx

;We dont talk about this
(provide ins_beg)

;ins_beg function, inserts element el into end of list lst
(define (ins_beg el lst)
  (cons el lst))

;ins_end function, inserts element el into end of list lst
(define (ins_end el lst)
  (append lst (list el)))

;cout_top_level, counds the number of top levels items in a list
(define (cout_top_level lst)
  (if
   (null? lst) 0
   (+ 1 (cout_top_level(cdr lst))))
  )

;count_instances, counds number of times an item occurs in a list
(define (count_instances el lst)
  (cond
    ((empty? lst) 0)
    ((equal? el (car lst))
     (add1 (count_instances el (cdr lst))))
    (else (count_instances el (cdr lst))))
 )

;count_instances_tr, a tail-recursive version of cout_instances
 (define (count_instances_tr el lst)
   (count_instances_tr_helper el lst))
   
 (define (count_instances_tr_helper el lst)
   (cond
     [(empty? lst) 0]
     ((equal? el (car lst))
      (add1 (count_instances_tr_helper el (cdr lst))))
     (else (count_instances_tr_helper el (cdr lst)))
   ))


;count_instances_deep, counts number of times an item occurs in a list
;(includes sub lists)
(define (count_instances_deep el lst)
  (cond
    [(empty? lst) 0]
    ((equal? el(car lst))
     (add1 (count_instances_deep el (cdr lst))))
    (else (count_instances_deep el (cdr lst)))))

